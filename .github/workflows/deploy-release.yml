name: Deploy release or pre-release that has just been published or edited

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 'Proxy Server'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Connect to VPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" | base64 -d > config.ovpn
          docker run -v $PWD:/vpn -d --cap-add=NET_ADMIN --device /dev/net/tun --name vpn dperson/openvpn-client -f "" -r 192.168.1.0/24
          sleep 10
          echo "VPN connection successful"
      - name: Set environment and version for deployment
        id: setEnv
        run: |
          PROD_ENV="${{ vars.PROD_ENV }}"
          TEST_ENV="${{ vars.TEST_ENV }}"
          GITHUB_REF="${{ github.ref }}"
          GITHUB_RELEASE_NAME="${{ github.event.release.name }}"



          if [[ ! $GITHUB_RELEASE_NAME == *"-dev" ]]; then
            # deploy to the Prod environment if the release tag is from Master
            DEPLOYED_ENV="Production ${PROD_ENV}"
            RELEASE_NAME=${{ github.event.release.name }}
            DEPLOY_TO="${PROD_ENV}"
          else
            # Set default deployment values
            RELEASE_NAME="dev-dev"
            DEPLOYED_ENV="Stage Environment(s): ${TEST_ENV}"
            DEPLOY_TO="${TEST_ENV}"
          fi

          echo "::set-output name=deployedenv::$(echo $DEPLOYED_ENV)"
          echo "::set-output name=deployto::$(echo $DEPLOY_TO)"
          echo "::set-output name=releasename::$(echo $RELEASE_NAME)"

      - name: Execute commands over ssh
        id: executessh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            redeploy -v "${{ steps.setEnv.outputs.releasename }}" -h "${{ steps.setEnv.outputs.deployto }}"

            # Show success message on console
            echo "${{ steps.setEnv.outputs.deployedenv }} deployed with release version ${{ github.event.release.name }}."

      - name: Success deployment — Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,workflow,took
          text: 'Magento extension version `${{ github.event.release.name }}` has been successfully deployed to `${{ steps.setEnv.outputs.deployedenv }}`!'
          author_name: GitHub Actions
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Failed deployment — Notify Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,workflow,took
          text: 'A Magento deployment has failed! Release `${{ github.event.release.name }} to environment `${{ steps.setEnv.outputs.deployedenv }}`. See Github Actions for more details.'
          author_name: GitHub Actions
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
